
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////
  const { postsData, likesData, isLoading, isError, error } = useSelector((state) => state.mainPostsSlice);

  if (isLoading) {
    return <h1>아직 로딩 중입니다</h1>;
  }
  if (isError) {
    return <h1>오류가 발생했어요</h1>;
  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // 스크롤 내리면 : window + top = height

    // 스크롤 올리면 : height와 같지 않음
    // console.log('Height: ', document.documentElement.scrollHeight);
    // console.log('Top:', document.documentElement.scrollTop);
    // console.log('Window: ', window.innerHeight);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    <mainPosts.js>
     // 2. likesData
    const likeQ = query(collection(db, 'likes'));
    const likeQuerySnapshot = await getDocs(likeQ);

    const likeMap = {};
    const likesData = [];

    likeQuerySnapshot.forEach((doc) => {
      // likeMap[likeTargetPostId] 객체 생성
      const like = doc.data();
      const likeTargetPostId = doc.data().targetPostId;
      likeMap[likeTargetPostId] = {
        targetPostId: like.targetPostId,
        userId: like.userId
      };

      //  각각의 객체들을 얕은복사하여 likesData 배열에 추가
      likesData.push({ ...likeMap[likeTargetPostId] });
    });

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
  const { likesData, isLoading, isError, error } = useSelector((state) => state.postsSlice);
  if (isLoading) {
    return <h1>아직 로딩 중입니다</h1>;
  }
  if (isError) {
    return <h1>오류가 발생했어요</h1>;
  }